{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://generativelanguage.googleapis.com/"
    }
  ],
  "info": {
    "title": "Generative Language API",
    "description": "The Generative Language API allows developers to use state-of-the-art Large Language Models (LLMs), also known as Generative Language Models, to build language applications. LLMs are a powerful, versatile type of machine learning model that enables computers to comprehend and generate natural language better than they ever have before.",
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "version": "v1beta1"
  },
  "paths": {
    "/v1beta1/{+name}": {
      "get": {
        "description": "Gets information about a specific Model.",
        "operationId": "generativelanguage.models.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Required. The resource name of the model. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    },
    "/v1beta1/{+model}:generateMessage": {
      "post": {
        "description": "Generates a response from the model given an input `MessagePrompt`.",
        "operationId": "generativelanguage.models.generateMessage",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateMessageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Required. The name of the model to use. Format: `name=models/{model}`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateMessageRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    },
    "/v1beta1/models": {
      "get": {
        "description": "Lists models available through the API.",
        "operationId": "generativelanguage.models.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of `Models` to return (per page). The service may return fewer models. If unspecified, at most 50 models will be returned per page. This method returns at most 1000 models per page, even if you pass a larger page_size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous `ListModels` call. Provide the `page_token` returned by one request as an argument to the next request to retrieve the next page. When paginating, all other parameters provided to `ListModels` must match the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    }
  },
  "tags": [
    {
      "name": "models"
    }
  ],
  "externalDocs": {
    "url": "https://cloud.google.com/"
  },
  "components": {
    "schemas": {
      "Model": {
        "properties": {
          "temperature": {
            "description": "Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be used by the backend while making the call to the model.",
            "type": "number",
            "format": "float"
          },
          "displayName": {
            "description": "The human-readable name of the model. E.g. \"Chat Panda\". The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "type": "string"
          },
          "topP": {
            "format": "float",
            "type": "number",
            "description": "Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be used by the backend while making the call to the model."
          },
          "version": {
            "description": "Required. The version number of the model. This represents the major version",
            "type": "string"
          },
          "name": {
            "description": "Required. The resource name of the `Model`. Format: `models/{model}` with a `{model}` naming convention of: * \"{base_model_id}-{version}\" Examples: * `models/chat-panda-001`",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A short description of the model."
          },
          "inputTokenLimit": {
            "description": "Maximum number of input tokens allowed for this model.",
            "type": "integer",
            "format": "int32"
          },
          "baseModelId": {
            "type": "string",
            "description": "Required. The name of the base model, pass this to the generation request. Examples: * `chat-panda`"
          },
          "supportedGenerationMethods": {
            "items": {
              "type": "string"
            },
            "description": "The model's supported generation methods. The method names are defined as Pascal case strings, such as `generateMessage` which correspond to API methods.",
            "type": "array"
          },
          "outputTokenLimit": {
            "description": "Maximum number of output tokens available for this model.",
            "type": "integer",
            "format": "int32"
          },
          "topK": {
            "type": "integer",
            "format": "int32",
            "description": "Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model."
          }
        },
        "description": "Information about a Generative Language Model.",
        "type": "object"
      },
      "CitationMetadata": {
        "properties": {
          "citationSources": {
            "description": "Citations to sources for a specific response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CitationSource"
            }
          }
        },
        "description": "Metadata about whether content in the response is attributed to a source and citations for those sources.",
        "type": "object"
      },
      "CitationSource": {
        "description": "A citation to a source for a portion of a specific response.",
        "properties": {
          "uri": {
            "description": "Optional. URI that is attributed as a source for a portion of the text.",
            "type": "string"
          },
          "endIndex": {
            "format": "int32",
            "description": "Optional. End of the attributed segment, exclusive.",
            "type": "integer"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32",
            "description": "Optional. Start of segment of the response that is attributed to this source. Index indicates the start of the segment, measured in bytes."
          }
        },
        "type": "object"
      },
      "GenerateMessageResponse": {
        "description": "The response from the model. This includes candidate messages and conversation history in the form of chronologically-ordered messages.",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Candidate response messages from the model."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "description": "The conversation history used by the model."
          }
        },
        "type": "object"
      },
      "GenerateMessageRequest": {
        "properties": {
          "topP": {
            "format": "float",
            "type": "number",
            "description": "Optional. If specified, nucleus sampling will be used as the decoding strategy. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`."
          },
          "candidateCount": {
            "format": "int32",
            "type": "integer",
            "description": "Optional. The number of generated response messages to return. This value must be between `[1, 10]`, inclusive. If unset, this will default to `1`."
          },
          "prompt": {
            "description": "Required. The structured textual input given to the model as a prompt. Given a prompt, the model will return what it predicts is the next message in the discussion.",
            "$ref": "#/components/schemas/MessagePrompt"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model."
          },
          "topK": {
            "description": "Optional. If specified, top-k sampling will be used as the decoding strategy. Top-k sampling considers the set of `top_k` most probable tokens.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object",
        "description": "Request to generate a message response from the model."
      },
      "MessagePrompt": {
        "type": "object",
        "description": "All of the structured input text passed to the model as a prompt. A `MessagePrompt` contains a structured set of fields that provide context for the conversation, examples of user input/model output message pairs that prime the model to respond in different ways, and the conversation history or list of messages representing the alternating turns of the conversation between the user and the model.",
        "properties": {
          "messages": {
            "description": "Required. A snapshot of the recent conversation history sorted chronologically. Turns alternate between two authors. If the total input size exceeds the model's `input_token_limit` the input will be truncated: The oldest items will be dropped from `messages`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "context": {
            "type": "string",
            "description": "Optional. Text that should be provided to the model first to ground the response. If not empty, this `context` will be given to the model first before the `examples` and `messages`. When using a `context` be sure to provide it with every request to maintain continuity. This field can be a description of your prompt to the model to help provide context and guide the responses. Examples: \"Translate the phrase from English to French.\" or \"Given a statement, classify the sentiment as happy, sad or neutral.\" Anything included in this field will take precedence over message history if the total input size exceeds the model's `input_token_limit` and the input request is truncated."
          },
          "examples": {
            "description": "Optional. Examples of what the model should generate. This includes both user input and the response that the model should emulate. These `examples` are treated identically to conversation messages except that they take precedence over the history in `messages`: If the total input size exceeds the model's `input_token_limit` the input will be truncated. Items will be dropped from `messages` before `examples`.",
            "items": {
              "$ref": "#/components/schemas/Example"
            },
            "type": "array"
          }
        }
      },
      "ListModelsResponse": {
        "description": "Response from `ListModel` containing a paginated list of Models.",
        "properties": {
          "models": {
            "description": "The returned Models.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
          }
        },
        "type": "object"
      },
      "Example": {
        "description": "An input/output example used to instruct the Model. It demonstrates how the model should respond or format its response.",
        "properties": {
          "input": {
            "$ref": "#/components/schemas/Message",
            "description": "An example of an input `Message` from the user."
          },
          "output": {
            "$ref": "#/components/schemas/Message",
            "description": "An example of what the model should output given the input."
          }
        },
        "type": "object"
      },
      "Message": {
        "properties": {
          "content": {
            "description": "Required. The text content of the structured `Message`.",
            "type": "string"
          },
          "author": {
            "type": "string",
            "description": "Optional. This serves as a key for tagging the content of this Message when it is fed to the model as text. The author can be any alphanumeric string."
          },
          "citationMetadata": {
            "$ref": "#/components/schemas/CitationMetadata",
            "description": "Output only. Citation information for model-generated `content` in this `Message`. If this `Message` was generated as output from the model, this field may be populated with attribution information for any text included in the `content`. This field is used only on output.",
            "readOnly": true
          }
        },
        "description": "The base unit of structured text. A `Message` includes an `author` and the `content` of the `Message`. The `author` is used to tag messages when they are fed to the model as text.",
        "type": "object"
      }
    },
    "parameters": {
      "access_token": {
        "name": "access_token",
        "in": "query",
        "description": "OAuth access token.",
        "schema": {
          "type": "string"
        }
      },
      "prettyPrint": {
        "name": "prettyPrint",
        "in": "query",
        "description": "Returns response with indentations and line breaks.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "alt": {
        "name": "alt",
        "in": "query",
        "description": "Data format for response.",
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "default": "json"
        }
      },
      "upload_protocol": {
        "name": "upload_protocol",
        "in": "query",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "schema": {
          "type": "string"
        }
      },
      "oauth_token": {
        "name": "oauth_token",
        "in": "query",
        "description": "OAuth 2.0 token for the current user.",
        "schema": {
          "type": "string"
        }
      },
      "callback": {
        "name": "callback",
        "in": "query",
        "description": "JSONP",
        "schema": {
          "type": "string"
        }
      },
      "quotaUser": {
        "name": "quotaUser",
        "in": "query",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "name": "key",
        "in": "query",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "Selector specifying which fields to include in a partial response.",
        "schema": {
          "type": "string"
        }
      },
      "uploadType": {
        "name": "uploadType",
        "in": "query",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "schema": {
          "type": "string"
        }
      },
      "_.xgafv": {
        "name": "$.xgafv",
        "in": "query",
        "description": "V1 error format.",
        "schema": {
          "type": "string",
          "enum": [
            "1",
            "2"
          ]
        }
      }
    }
  }
}