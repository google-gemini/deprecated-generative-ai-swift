{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://generativelanguage.googleapis.com/"
    }
  ],
  "info": {
    "title": "Generative Language API",
    "description": "The PaLM API allows developers to build generative AI applications using the PaLM model. Large Language Models (LLMs) are a powerful, versatile type of machine learning model that enables computers to comprehend and generate natural language through a series of prompts. The PaLM API is based on Google's next generation LLM, PaLM. It excels at a variety of different tasks like code generation, reasoning, and writing. You can use the PaLM API to build generative AI applications for use cases like content generation, dialogue agents, summarization and classification systems, and more.",
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "version": "v1beta2"
  },
  "paths": {
    "/v1beta2/{+model}:generateMessage": {
      "post": {
        "description": "Generates a response from the model given an input `MessagePrompt`.",
        "operationId": "generativelanguage.models.generateMessage",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateMessageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Required. The name of the model to use. Format: `name=models/{model}`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateMessageRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    },
    "/v1beta2/{+model}:generateText": {
      "post": {
        "description": "Generates a response from the model given an input message.",
        "operationId": "generativelanguage.models.generateText",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTextResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Required. The model name to use with the format name=models/{model}.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTextRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    },
    "/v1beta2/{+model}:embedText": {
      "post": {
        "description": "Generates an embedding from the model given an input message.",
        "operationId": "generativelanguage.models.embedText",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedTextResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Required. The model name to use with the format model=models/{model}.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedTextRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    },
    "/v1beta2/models": {
      "get": {
        "description": "Lists models available through the API.",
        "operationId": "generativelanguage.models.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of `Models` to return (per page). The service may return fewer models. If unspecified, at most 50 models will be returned per page. This method returns at most 1000 models per page, even if you pass a larger page_size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "A page token, received from a previous `ListModels` call. Provide the `page_token` returned by one request as an argument to the next request to retrieve the next page. When paginating, all other parameters provided to `ListModels` must match the call that provided the page token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    },
    "/v1beta2/{+name}": {
      "get": {
        "description": "Gets information about a specific Model.",
        "operationId": "generativelanguage.models.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Required. The resource name of the model. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    },
    "/v1beta2/{+model}:countMessageTokens": {
      "post": {
        "description": "Runs a model's tokenizer on a string and returns the token count.",
        "operationId": "generativelanguage.models.countMessageTokens",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CountMessageTokensResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "description": "Required. The model's resource name. This serves as an ID for the Model to use. This name should match a model name returned by the `ListModels` method. Format: `models/{model}`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountMessageTokensRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        }
      ]
    }
  },
  "tags": [
    {
      "name": "models"
    }
  ],
  "externalDocs": {
    "url": "https://developers.generativeai.google/api"
  },
  "components": {
    "schemas": {
      "EmbedTextRequest": {
        "type": "object",
        "description": "Request to get a text embedding from the model.",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required. The free-form input text that the model will turn into an embedding."
          }
        }
      },
      "GenerateTextResponse": {
        "properties": {
          "candidates": {
            "type": "array",
            "description": "Candidate responses from the model.",
            "items": {
              "$ref": "#/components/schemas/TextCompletion"
            }
          }
        },
        "type": "object",
        "description": "The response from the model, including candidate completions."
      },
      "Embedding": {
        "description": "A list of floats representing the embedding.",
        "type": "object",
        "properties": {
          "value": {
            "description": "The embedding values.",
            "items": {
              "type": "number",
              "format": "float"
            },
            "type": "array"
          }
        }
      },
      "Message": {
        "type": "object",
        "description": "The base unit of structured text. A `Message` includes an `author` and the `content` of the `Message`. The `author` is used to tag messages when they are fed to the model as text.",
        "properties": {
          "content": {
            "type": "string",
            "description": "Required. The text content of the structured `Message`."
          },
          "citationMetadata": {
            "description": "Output only. Citation information for model-generated `content` in this `Message`. If this `Message` was generated as output from the model, this field may be populated with attribution information for any text included in the `content`. This field is used only on output.",
            "$ref": "#/components/schemas/CitationMetadata",
            "readOnly": true
          },
          "author": {
            "type": "string",
            "description": "Optional. The author of this Message. This serves as a key for tagging the content of this Message when it is fed to the model as text. The author can be any alphanumeric string."
          }
        }
      },
      "GenerateMessageRequest": {
        "properties": {
          "topK": {
            "description": "Optional. The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens.",
            "format": "int32",
            "type": "integer"
          },
          "topP": {
            "type": "number",
            "format": "float",
            "description": "Optional. The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`."
          },
          "candidateCount": {
            "format": "int32",
            "description": "Optional. The number of generated response messages to return. This value must be between `[1, 8]`, inclusive. If unset, this will default to `1`.",
            "type": "integer"
          },
          "prompt": {
            "description": "Required. The structured textual input given to the model as a prompt. Given a prompt, the model will return what it predicts is the next message in the discussion.",
            "$ref": "#/components/schemas/MessagePrompt"
          },
          "temperature": {
            "type": "number",
            "description": "Optional. Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model.",
            "format": "float"
          }
        },
        "type": "object",
        "description": "Request to generate a message response from the model."
      },
      "ListModelsResponse": {
        "type": "object",
        "description": "Response from `ListModel` containing a paginated list of Models.",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            },
            "description": "The returned Models."
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no more pages."
          }
        }
      },
      "EmbedTextResponse": {
        "type": "object",
        "description": "The response to a EmbedTextRequest.",
        "properties": {
          "embedding": {
            "readOnly": true,
            "description": "Output only. The embedding generated from the input text.",
            "$ref": "#/components/schemas/Embedding"
          }
        }
      },
      "Model": {
        "description": "Information about a Generative Language Model.",
        "properties": {
          "name": {
            "description": "Required. The resource name of the `Model`. Format: `models/{model}` with a `{model}` naming convention of: * \"{base_model_id}-{version}\" Examples: * `models/chat-pison-001`",
            "type": "string"
          },
          "topP": {
            "type": "number",
            "description": "For Nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least `top_p`. This value specifies default to be used by the backend while making the call to the model.",
            "format": "float"
          },
          "description": {
            "description": "A short description of the model.",
            "type": "string"
          },
          "outputTokenLimit": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of output tokens available for this model."
          },
          "version": {
            "description": "Required. The version number of the model. This represents the major version",
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "The human-readable name of the model. E.g. \"Chat Bison\". The name can be up to 128 characters long and can consist of any UTF-8 characters."
          },
          "temperature": {
            "format": "float",
            "description": "Controls the randomness of the output. Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce responses that are more varied, while a value closer to `0.0` will typically result in less surprising responses from the model. This value specifies default to be used by the backend while making the call to the model.",
            "type": "number"
          },
          "baseModelId": {
            "description": "Required. The name of the base model, pass this to the generation request. Examples: * `chat-bison`",
            "type": "string"
          },
          "supportedGenerationMethods": {
            "description": "The model's supported generation methods. The method names are defined as Pascal case strings, such as `generateMessage` which correspond to API methods.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "topK": {
            "description": "For Top-k sampling. Top-k sampling considers the set of `top_k` most probable tokens. This value specifies default to be used by the backend while making the call to the model.",
            "format": "int32",
            "type": "integer"
          },
          "inputTokenLimit": {
            "description": "Maximum number of input tokens allowed for this model.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CountMessageTokensResponse": {
        "type": "object",
        "description": "A response from `CountMessageTokens`. It returns the model's `token_count` for the `prompt`.",
        "properties": {
          "tokenCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of tokens that the `model` tokenizes the `prompt` into. Always non-negative."
          }
        }
      },
      "CitationMetadata": {
        "description": "A collection of source attributions for a piece of content.",
        "type": "object",
        "properties": {
          "citationSources": {
            "type": "array",
            "description": "Citations to sources for a specific response.",
            "items": {
              "$ref": "#/components/schemas/CitationSource"
            }
          }
        }
      },
      "CitationSource": {
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32",
            "description": "Optional. Start of segment of the response that is attributed to this source. Index indicates the start of the segment, measured in bytes."
          },
          "uri": {
            "type": "string",
            "description": "Optional. URI that is attributed as a source for a portion of the text."
          },
          "license": {
            "description": "Optional. License for the GitHub project that is attributed as a source for segment. License info is required for code citations.",
            "type": "string"
          },
          "endIndex": {
            "format": "int32",
            "type": "integer",
            "description": "Optional. End of the attributed segment, exclusive."
          }
        },
        "type": "object",
        "description": "A citation to a source for a portion of a specific response."
      },
      "GenerateMessageResponse": {
        "description": "The response from the model. This includes candidate messages and conversation history in the form of chronologically-ordered messages.",
        "type": "object",
        "properties": {
          "candidates": {
            "description": "Candidate response messages from the model.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "The conversation history used by the model."
          }
        }
      },
      "GenerateTextRequest": {
        "type": "object",
        "properties": {
          "topP": {
            "description": "The maximum cumulative probability of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Tokens are sorted based on their assigned probabilities so that only the most liekly tokens are considered. Top-k sampling directly limits the maximum number of tokens to consider, while Nucleus sampling limits number of tokens based on the cumulative probability. Note: The default value varies by model, see the `Model.top_p` attribute of the `Model` returned the `getModel` function.",
            "type": "number",
            "format": "float"
          },
          "stopSequences": {
            "items": {
              "type": "string"
            },
            "description": "The set of character sequences (up to 5) that will stop output generation. If specified, the API will stop at the first appearance of a stop sequence. The stop sequence will not be included as part of the response.",
            "type": "array"
          },
          "topK": {
            "description": "The maximum number of tokens to consider when sampling. The model uses combined Top-k and nucleus sampling. Top-k sampling considers the set of `top_k` most probable tokens. Defaults to 40. Note: The default value varies by model, see the `Model.top_k` attribute of the `Model` returned the `getModel` function.",
            "type": "integer",
            "format": "int32"
          },
          "temperature": {
            "format": "float",
            "description": "Controls the randomness of the output. Note: The default value varies by model, see the `Model.temperature` attribute of the `Model` returned the `getModel` function. Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied and creative, while a value closer to 0.0 will typically result in more straightforward responses from the model.",
            "type": "number"
          },
          "candidateCount": {
            "description": "Number of generated responses to return. This value must be between [1, 8], inclusive. If unset, this will default to 1.",
            "type": "integer",
            "format": "int32"
          },
          "prompt": {
            "description": "Required. The free-form input text given to the model as a prompt. Given a prompt, the model will generate a TextCompletion response it predicts as the completion of the input text.",
            "$ref": "#/components/schemas/TextPrompt"
          },
          "maxOutputTokens": {
            "type": "integer",
            "description": "The maximum number of tokens to include in a candidate. If unset, this will default to 64.",
            "format": "int32"
          }
        },
        "description": "Request to generate a text completion response from the model."
      },
      "MessagePrompt": {
        "type": "object",
        "properties": {
          "context": {
            "description": "Optional. Text that should be provided to the model first to ground the response. If not empty, this `context` will be given to the model first before the `examples` and `messages`. When using a `context` be sure to provide it with every request to maintain continuity. This field can be a description of your prompt to the model to help provide context and guide the responses. Examples: \"Translate the phrase from English to French.\" or \"Given a statement, classify the sentiment as happy, sad or neutral.\" Anything included in this field will take precedence over message history if the total input size exceeds the model's `input_token_limit` and the input request is truncated.",
            "type": "string"
          },
          "examples": {
            "description": "Optional. Examples of what the model should generate. This includes both user input and the response that the model should emulate. These `examples` are treated identically to conversation messages except that they take precedence over the history in `messages`: If the total input size exceeds the model's `input_token_limit` the input will be truncated. Items will be dropped from `messages` before `examples`.",
            "items": {
              "$ref": "#/components/schemas/Example"
            },
            "type": "array"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Required. A snapshot of the recent conversation history sorted chronologically. Turns alternate between two authors. If the total input size exceeds the model's `input_token_limit` the input will be truncated: The oldest items will be dropped from `messages`.",
            "type": "array"
          }
        },
        "description": "All of the structured input text passed to the model as a prompt. A `MessagePrompt` contains a structured set of fields that provide context for the conversation, examples of user input/model output message pairs that prime the model to respond in different ways, and the conversation history or list of messages representing the alternating turns of the conversation between the user and the model."
      },
      "CountMessageTokensRequest": {
        "properties": {
          "prompt": {
            "$ref": "#/components/schemas/MessagePrompt",
            "description": "Required. The prompt, whose token count is to be returned."
          }
        },
        "type": "object",
        "description": "Counts the number of tokens in the `prompt` sent to a model. Models may tokenize text differently, so each model may return a different `token_count`."
      },
      "Example": {
        "description": "An input/output example used to instruct the Model. It demonstrates how the model should respond or format its response.",
        "type": "object",
        "properties": {
          "input": {
            "description": "An example of an input `Message` from the user.",
            "$ref": "#/components/schemas/Message"
          },
          "output": {
            "description": "An example of what the model should output given the input.",
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "TextCompletion": {
        "type": "object",
        "description": "Output text returned from a model.",
        "properties": {
          "output": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. The generated text returned from the model."
          }
        }
      },
      "TextPrompt": {
        "description": "Text given to the model as a prompt. The Model will use this TextPrompt to Generate a text completion.",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required. The prompt text."
          }
        }
      }
    },
    "parameters": {
      "oauth_token": {
        "name": "oauth_token",
        "in": "query",
        "description": "OAuth 2.0 token for the current user.",
        "schema": {
          "type": "string"
        }
      },
      "upload_protocol": {
        "name": "upload_protocol",
        "in": "query",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "schema": {
          "type": "string"
        }
      },
      "uploadType": {
        "name": "uploadType",
        "in": "query",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "schema": {
          "type": "string"
        }
      },
      "access_token": {
        "name": "access_token",
        "in": "query",
        "description": "OAuth access token.",
        "schema": {
          "type": "string"
        }
      },
      "alt": {
        "name": "alt",
        "in": "query",
        "description": "Data format for response.",
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "default": "json"
        }
      },
      "callback": {
        "name": "callback",
        "in": "query",
        "description": "JSONP",
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "name": "key",
        "in": "query",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "Selector specifying which fields to include in a partial response.",
        "schema": {
          "type": "string"
        }
      },
      "prettyPrint": {
        "name": "prettyPrint",
        "in": "query",
        "description": "Returns response with indentations and line breaks.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "quotaUser": {
        "name": "quotaUser",
        "in": "query",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "schema": {
          "type": "string"
        }
      },
      "_.xgafv": {
        "name": "$.xgafv",
        "in": "query",
        "description": "V1 error format.",
        "schema": {
          "type": "string",
          "enum": [
            "1",
            "2"
          ]
        }
      }
    }
  }
}